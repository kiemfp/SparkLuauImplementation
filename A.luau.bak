game = loadstring([[

	getgenv().game = newproxy(true);
	local GameMetatable = {}

function GameMetatable.__add(game1, game2)
    local newGame = {
        name = game1.name .. " & " .. game2.name,
        players = game1.players + game2.players,
        status = game1.status .. ", " .. game2.status
    }
    setmetatable(newGame, GameMetatable)
    return newGame
end

function GameMetatable.__sub(game1, game2)
    return nil -- Hook para subtração
end

function GameMetatable.__mul(game1, game2)
    return nil -- Hook para multiplicação
end

function GameMetatable.__div(game1, game2)
    return nil -- Hook para divisão
end

function GameMetatable.__mod(game1, game2)
    return nil -- Hook para módulo
end

function GameMetatable.__pow(game1, game2)
    return nil -- Hook para exponenciação
end

function GameMetatable.__unm(game)
    return nil -- Hook para negação unária
end

function GameMetatable.__concat(game1, game2)
    local newGame = {
        name = game1.name .. " & " .. game2.name,
        players = game1.players + game2.players,
        status = game1.status .. ", " .. game2.status
    }
    setmetatable(newGame, GameMetatable)
    return newGame
end

function GameMetatable.__len(game)
    return nil -- Hook para operador de comprimento (#)
end

function GameMetatable.__eq(game1, game2)
    return nil -- Hook para igualdade (==)
end

function GameMetatable.__lt(game1, game2)
    return nil -- Hook para menor que (<)
end

function GameMetatable.__le(game1, game2)
    return nil -- Hook para menor ou igual (<=)
end

function GameMetatable.__index(table, key)
    return nil -- Hook para acesso a campo inexistente (obj.key)
end

function GameMetatable.__newindex(table, key, value)
    -- Hook para atribuição a campo inexistente (obj.key = value)
end

function GameMetatable.__call(table, ...)
    return nil -- Hook para chamar o objeto como uma função (obj())
end

function GameMetatable.__tostring(game)
    return "Um objeto Game" -- Hook para conversão para string (tostring(obj))
end

function GameMetatable.__gc(game)
    -- Hook para garbage collection
end

function createGame(name, players, status)
    local game = {name = name, players = players, status = status}
    setmetatable(game, GameMetatable)
    return game
end

local g1 = createGame("smt1", 2, "Em andamento")
local g2 = createGame("smth2", 3, "Pausado")

print(g1.name, g1.players, g1.status)
print(g2.name, g2.players, g2.status)

local g3 = g1 + g2
local g4 = g1 .. g2

print(g3.name, g3.players, g3.status)
print(g4.name, g4.players, g4.status)

print(tostring(g1))

	if getmeta then
	getgenv().workspace = getmeta(getgenv().game)
	else
		getgenv().workspace = getmetatable(getgenv().game)
	end
	return {20,20,20,20}
]])()

print(game[1] + game[2] + game[3] + game[4]) --80
if not getmeta then
    print(getmetatable(getgenv().game))
    print(getmetatable(getgenv().workspace))
else
    print(getmeta(getgenv().game))
    print(getmeta(getgenv().workspace))
end